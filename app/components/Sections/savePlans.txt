'use client';
import { style } from '@/app/utils/style';
import React, { useRef, useState, useEffect } from 'react';
import { IoMdCall } from 'react-icons/io';
import { MdDescription } from 'react-icons/md';
import { useScroll, motion, useTransform } from 'framer-motion';
import { initializePaddle, Paddle } from '@paddle/paddle-js';
import axiosApi from '@/app/api/axios';
import { toast } from 'react-hot-toast';
import Loader from '../Layout/Loader/Loader';
import Dollar from '@/app/utils/Dollar';

interface Plan {
  id: number;
  name: string;
  description: string;
  price: number;
  calls: number;
  type: string;
  price_id: string | null;
  created_at: string;
  updated_at: string;
}

const Plans = () => {

  const [plans, setPlans] = useState<Plan[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [planType, setPlanType] = useState<'monthly' | 'yearly'>('monthly');

  useEffect(() => {
    const loadPaddleScript = () => {
      const script = document.createElement('script');
      script.src = 'https://cdn.paddle.com/paddle/v2/paddle.js';
      script.async = true;
      script.onload = () => {
        if (window.Paddle) {
          window.Paddle.Environment.set('sandbox');
          window.Paddle.Initialize({ token: 'test_ba14a1d128bae2248fc68458ef7' });
        }
      };
      document.head.appendChild(script);
    };

    loadPaddleScript();
  }, []);

  const storeSubscription = async (price_id: string | null) => {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        const response = await axiosApi.post('/subscription', { price_id }, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        console.log("SECOND", response.data.data);
        return response.data.data;
      } else {
        toast.error("Please Login");
      }
    } catch (error) {
      console.error('Storing subscription failed', error);
    }
  };

  const openCheckout = (price_id: string, customer_id: string) => {
    if (window.Paddle) {
      window.Paddle.Checkout.open({
        settings: {
          allowLogout: false,
        },
        items: [
          {
            priceId: price_id,
            quantity: 1,
          },
        ],
        customer: {
          id: customer_id,
        },
        customData: {
          subscription_type: 'default',
        },
      });
    }
  };

  const handleSubscribeClick = async (price_id: string | null) => {
    const subscriptionData = await storeSubscription(price_id);
    console.log("subscriptionData", subscriptionData);
    console.log("priceId", subscriptionData?.items[0]?.priceId);
    console.log("customer", subscriptionData?.customer?.id);
    if (subscriptionData) {
      openCheckout(subscriptionData?.items[0]?.priceId, subscriptionData?.customer?.id);
    }
  };


  useEffect(() => {
    const fetchPlans = async (type: 'monthly' | 'yearly') => {
      try {
        const response = await axiosApi.get('/plan');
        const filteredPlans = response.data.data.filter((plan: Plan) => {
          // Include the free plan and custom solution for yearly type
          if (type === 'yearly' && (plan.name === 'Free' || plan.name === 'Custom Solution')) {
            return true;
          }
          return plan.type === type;
        });
        setPlans(filteredPlans);
      } catch (error) {
        console.error('Error fetching plans:', error);
      } finally {
        setLoading(false);
      }
    };
  
    fetchPlans(planType);
  }, [planType]);
  

  const ref = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ['0 1', '1.33 1']
  })
  const scaleProgress = useTransform(scrollYProgress, [0, 1], [0.8, 1]);
  const opacityProgress = useTransform(scrollYProgress, [0, 1], [0.6, 1]);
  return (
    <>
      {
        loading ? (
          <Loader />
        ) : (
          <section id='plans' className="container relative bg-[#fff]">
            <Dollar/>
            <div className="text-center">
              <h2 className='text-[30px] font-[600] text-slate-700 mb-2'>
                Our Plans
              </h2>
              <div className="flex justify-center space-x-4 mb-6">
                <button
                  className={`px-4 py-2 border rounded ${planType === 'monthly' ? 'bg-blue-500 text-white' : 'bg-white text-blue-500'}`}
                  onClick={() => setPlanType('monthly')}>
                  Monthly
                </button>
                <button
                  className={`px-4 py-2 border rounded ${planType === 'yearly' ? 'bg-blue-500 text-white' : 'bg-white text-blue-500'}`}
                  onClick={() => setPlanType('yearly')}>
                  Yearly
                </button>
              </div>
            </div>
            <div className="grid grid-cols-1 800px:grid-cols-4 md:grid-cols-2 gap-10 mt-20 md:w-11/12 mx-auto">
              {Array.isArray(plans) &&
                plans?.map((item: any, index: number) => (
                  <div key={item.id} className="relative">
                    {/* Conditionally render "Popular Plan" above the third card */}
                    {index === 2 && (
                      <div className="absolute top-[-2rem] left-1/2 transform -translate-x-1/2 bg-[#2190ff] text-white px-3 py-1 rounded-md">
                        Popular Plan
                      </div>
                    )}
                    <div className="border border-solid border-[#2190ff] flex flex-col py-10 md:px-6 px-4 rounded-lg shadow-3xl">
                      <h3 className="text-3xl font-bold text-center text-[#2190ff]">{item.name}</h3>
                      <p className="text-slate-700 text-center">
                        {item.price}
                        <span className="text-base text-center text-[#2190ff] font-medium">
                          /{item.type}
                        </span>
                      </p>
                      <div className="mt-[.5rem] space-y-3">
                        <div className="flex items-center justify-center space-x-4">
                          <MdDescription className="w-4 h-4 text-center text-[#2190ff]" />
                          <p className="text-[18px] text-center text-slate-700">{item.description}</p>
                        </div>
                        <div className="flex items-center justify-center space-x-4">
                          <IoMdCall className="w-4 h-4 text-[#2190ff]" />
                          <p className="text-[18px] text-center text-slate-700">{item.calls} Call</p>
                        </div>
                      </div>
                      <div className="p-3 items-center justify-center flex">
                        <button
                          className={`${style.button} !justify-center !w-[120px] !h-[40px]`}
                          onClick={() => handleSubscribeClick(item.price_id)}
                        >
                          Subscribe
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </section>
        )
      }
    </>
  );
}


export default Plans;